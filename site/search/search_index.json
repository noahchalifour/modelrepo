{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"reference/chalifour/db/","title":"chalifour.db","text":""},{"location":"reference/chalifour/db/managers/","title":"chalifour.db.managers","text":""},{"location":"reference/chalifour/db/managers/#chalifour.db.managers.ModelManager","title":"<code>ModelManager</code>","text":"<p>               Bases: <code>Generic[T]</code>, <code>ABC</code></p> <p>Abstract base class for a generic model manager (Repository). Defines common CRUD operations for any model type.</p> Source code in <code>src/chalifour/db/managers/_model_manager.py</code> <pre><code>class ModelManager(Generic[T], abc.ABC):\n    \"\"\"\n    Abstract base class for a generic model manager (Repository).\n    Defines common CRUD operations for any model type.\n    \"\"\"\n\n    @abc.abstractmethod\n    def create(self, model_data: Dict[str, Any]) -&gt; Optional[T]:\n        \"\"\"\n        Creates a new model instance in the database.\n        :param model_data: A dictionary containing the data for the new model.\n        :return: The created model instance or None if creation fails (e.g., due to duplicate key).\n        \"\"\"\n        pass\n\n    @abc.abstractmethod\n    def get_by_id(self, model_id: Any) -&gt; Optional[T]:\n        \"\"\"\n        Retrieves a model instance by its ID.\n        The type of model_id will depend on the database (e.g., int for SQL, ObjectId for MongoDB).\n        :param model_id: The unique identifier of the model.\n        :return: The model instance or None if not found.\n        \"\"\"\n        pass\n\n    @abc.abstractmethod\n    def find_one(self, query: Dict[str, Any]) -&gt; Optional[T]:\n        \"\"\"\n        Finds a single model instance based on a query.\n        The query format will vary by database.\n        :param query: A dictionary representing the search criteria.\n        :return: A single model instance or None if not found.\n        \"\"\"\n        pass\n\n    @abc.abstractmethod\n    def find_all(\n        self,\n        query: Optional[Dict[str, Any]] = None,\n        limit: Optional[int] = None,\n        skip: Optional[int] = None,\n    ) -&gt; List[T]:\n        \"\"\"\n        Finds all model instances matching a query, with optional pagination.\n        :param query: Optional dictionary representing the search criteria. If None, retrieves all.\n        :param limit: Maximum number of results to return.\n        :param skip: Number of results to skip (for pagination).\n        :return: A list of model instances.\n        \"\"\"\n        pass\n\n    @abc.abstractmethod\n    def update(self, model_id: Any, update_data: Dict[str, Any]) -&gt; Optional[T]:\n        \"\"\"\n        Updates an existing model instance.\n        :param model_id: The ID of the model to update.\n        :param update_data: A dictionary containing the fields to update and their new values.\n        :return: The updated model instance or None if not found/updated.\n        \"\"\"\n        pass\n\n    @abc.abstractmethod\n    def delete(self, model_id: Any) -&gt; bool:\n        \"\"\"\n        Deletes a model instance by its ID.\n        :param model_id: The ID of the model to delete.\n        :return: True if the model was deleted, False otherwise.\n        \"\"\"\n        pass\n\n    @abc.abstractmethod\n    def count(self, query: Optional[Dict[str, Any]] = None) -&gt; int:\n        \"\"\"\n        Counts the number of model instances matching a query.\n        :param query: Optional dictionary representing the search criteria.\n        :return: The number of matching instances.\n        \"\"\"\n        pass\n</code></pre>"},{"location":"reference/chalifour/db/managers/#chalifour.db.managers.ModelManager.count","title":"<code>count(query=None)</code>  <code>abstractmethod</code>","text":"<p>Counts the number of model instances matching a query. :param query: Optional dictionary representing the search criteria. :return: The number of matching instances.</p> Source code in <code>src/chalifour/db/managers/_model_manager.py</code> <pre><code>@abc.abstractmethod\ndef count(self, query: Optional[Dict[str, Any]] = None) -&gt; int:\n    \"\"\"\n    Counts the number of model instances matching a query.\n    :param query: Optional dictionary representing the search criteria.\n    :return: The number of matching instances.\n    \"\"\"\n    pass\n</code></pre>"},{"location":"reference/chalifour/db/managers/#chalifour.db.managers.ModelManager.create","title":"<code>create(model_data)</code>  <code>abstractmethod</code>","text":"<p>Creates a new model instance in the database. :param model_data: A dictionary containing the data for the new model. :return: The created model instance or None if creation fails (e.g., due to duplicate key).</p> Source code in <code>src/chalifour/db/managers/_model_manager.py</code> <pre><code>@abc.abstractmethod\ndef create(self, model_data: Dict[str, Any]) -&gt; Optional[T]:\n    \"\"\"\n    Creates a new model instance in the database.\n    :param model_data: A dictionary containing the data for the new model.\n    :return: The created model instance or None if creation fails (e.g., due to duplicate key).\n    \"\"\"\n    pass\n</code></pre>"},{"location":"reference/chalifour/db/managers/#chalifour.db.managers.ModelManager.delete","title":"<code>delete(model_id)</code>  <code>abstractmethod</code>","text":"<p>Deletes a model instance by its ID. :param model_id: The ID of the model to delete. :return: True if the model was deleted, False otherwise.</p> Source code in <code>src/chalifour/db/managers/_model_manager.py</code> <pre><code>@abc.abstractmethod\ndef delete(self, model_id: Any) -&gt; bool:\n    \"\"\"\n    Deletes a model instance by its ID.\n    :param model_id: The ID of the model to delete.\n    :return: True if the model was deleted, False otherwise.\n    \"\"\"\n    pass\n</code></pre>"},{"location":"reference/chalifour/db/managers/#chalifour.db.managers.ModelManager.find_all","title":"<code>find_all(query=None, limit=None, skip=None)</code>  <code>abstractmethod</code>","text":"<p>Finds all model instances matching a query, with optional pagination. :param query: Optional dictionary representing the search criteria. If None, retrieves all. :param limit: Maximum number of results to return. :param skip: Number of results to skip (for pagination). :return: A list of model instances.</p> Source code in <code>src/chalifour/db/managers/_model_manager.py</code> <pre><code>@abc.abstractmethod\ndef find_all(\n    self,\n    query: Optional[Dict[str, Any]] = None,\n    limit: Optional[int] = None,\n    skip: Optional[int] = None,\n) -&gt; List[T]:\n    \"\"\"\n    Finds all model instances matching a query, with optional pagination.\n    :param query: Optional dictionary representing the search criteria. If None, retrieves all.\n    :param limit: Maximum number of results to return.\n    :param skip: Number of results to skip (for pagination).\n    :return: A list of model instances.\n    \"\"\"\n    pass\n</code></pre>"},{"location":"reference/chalifour/db/managers/#chalifour.db.managers.ModelManager.find_one","title":"<code>find_one(query)</code>  <code>abstractmethod</code>","text":"<p>Finds a single model instance based on a query. The query format will vary by database. :param query: A dictionary representing the search criteria. :return: A single model instance or None if not found.</p> Source code in <code>src/chalifour/db/managers/_model_manager.py</code> <pre><code>@abc.abstractmethod\ndef find_one(self, query: Dict[str, Any]) -&gt; Optional[T]:\n    \"\"\"\n    Finds a single model instance based on a query.\n    The query format will vary by database.\n    :param query: A dictionary representing the search criteria.\n    :return: A single model instance or None if not found.\n    \"\"\"\n    pass\n</code></pre>"},{"location":"reference/chalifour/db/managers/#chalifour.db.managers.ModelManager.get_by_id","title":"<code>get_by_id(model_id)</code>  <code>abstractmethod</code>","text":"<p>Retrieves a model instance by its ID. The type of model_id will depend on the database (e.g., int for SQL, ObjectId for MongoDB). :param model_id: The unique identifier of the model. :return: The model instance or None if not found.</p> Source code in <code>src/chalifour/db/managers/_model_manager.py</code> <pre><code>@abc.abstractmethod\ndef get_by_id(self, model_id: Any) -&gt; Optional[T]:\n    \"\"\"\n    Retrieves a model instance by its ID.\n    The type of model_id will depend on the database (e.g., int for SQL, ObjectId for MongoDB).\n    :param model_id: The unique identifier of the model.\n    :return: The model instance or None if not found.\n    \"\"\"\n    pass\n</code></pre>"},{"location":"reference/chalifour/db/managers/#chalifour.db.managers.ModelManager.update","title":"<code>update(model_id, update_data)</code>  <code>abstractmethod</code>","text":"<p>Updates an existing model instance. :param model_id: The ID of the model to update. :param update_data: A dictionary containing the fields to update and their new values. :return: The updated model instance or None if not found/updated.</p> Source code in <code>src/chalifour/db/managers/_model_manager.py</code> <pre><code>@abc.abstractmethod\ndef update(self, model_id: Any, update_data: Dict[str, Any]) -&gt; Optional[T]:\n    \"\"\"\n    Updates an existing model instance.\n    :param model_id: The ID of the model to update.\n    :param update_data: A dictionary containing the fields to update and their new values.\n    :return: The updated model instance or None if not found/updated.\n    \"\"\"\n    pass\n</code></pre>"},{"location":"reference/chalifour/db/managers/#chalifour.db.managers.SQLAlchemyModelManager","title":"<code>SQLAlchemyModelManager</code>","text":"<p>               Bases: <code>ModelManager[T]</code></p> <p>SQLAlchemy implementation of the ModelManager interface.</p> <p>This class provides CRUD operations for SQLAlchemy models, handling session management and database interactions. It implements all abstract methods defined in the ModelManager base class.</p> <p>Attributes:</p> Name Type Description <code>engine</code> <p>SQLAlchemy engine instance connected to the database</p> <code>model_class</code> <p>The SQLAlchemy model class this manager will operate on</p> <code>Session</code> <p>SQLAlchemy sessionmaker factory for creating new sessions</p> Source code in <code>src/chalifour/db/managers/_sql_alchemy_model_manager.py</code> <pre><code>class SQLAlchemyModelManager(ModelManager[T]):\n    \"\"\"\n    SQLAlchemy implementation of the ModelManager interface.\n\n    This class provides CRUD operations for SQLAlchemy models, handling session\n    management and database interactions. It implements all abstract methods\n    defined in the ModelManager base class.\n\n    Attributes:\n        engine: SQLAlchemy engine instance connected to the database\n        model_class: The SQLAlchemy model class this manager will operate on\n        Session: SQLAlchemy sessionmaker factory for creating new sessions\n    \"\"\"\n\n    def __init__(self, db_uri: str, model_class: Type[T]):\n        \"\"\"\n        Initialize the SQLAlchemy model manager.\n\n        Args:\n            db_uri: Database connection URI (e.g., 'sqlite:///database.db')\n            model_class: The SQLAlchemy model class this manager will operate on\n                         (must be a subclass of the declarative Base)\n\n        Note:\n            This constructor automatically creates the necessary tables in the database\n            if they don't already exist.\n        \"\"\"\n        self.engine = create_engine(db_uri)\n        self.model_class = model_class\n        Base.metadata.create_all(self.engine)  # Ensure table exists for this model\n        self.Session = sessionmaker(bind=self.engine)\n\n    def create(self, model_data: Dict[str, Any]) -&gt; Optional[T]:\n        \"\"\"\n        Creates a new model instance in the database.\n\n        Args:\n            model_data: Dictionary containing the data for the new model instance\n                        with keys corresponding to model attributes\n\n        Returns:\n            The created model instance with any auto-generated fields populated,\n            or None if creation fails (e.g., due to integrity constraints)\n\n        Note:\n            This method handles session management and automatically rolls back\n            the transaction in case of IntegrityError.\n        \"\"\"\n        session = self.Session()\n        try:\n            new_instance = self.model_class(**model_data)\n            session.add(new_instance)\n            session.commit()\n            session.refresh(new_instance)  # Refresh to get auto-generated ID if any\n            return new_instance\n        except IntegrityError as e:\n            session.rollback()\n            print(f\"SQLAlchemy create error: {e}\")\n            return None\n        finally:\n            session.close()\n\n    def get_by_id(self, model_id: Any) -&gt; Optional[T]:\n        \"\"\"\n        Retrieves a model instance by its primary key ID.\n\n        Args:\n            model_id: The primary key value of the model to retrieve\n\n        Returns:\n            The model instance if found, or None if no model exists with the given ID\n        \"\"\"\n        session = self.Session()\n        try:\n            return session.query(self.model_class).get(model_id)\n        finally:\n            session.close()\n\n    def find_one(self, query: Dict[str, Any]) -&gt; Optional[T]:\n        \"\"\"\n        Finds a single model instance based on a query dictionary.\n\n        Args:\n            query: Dictionary of attribute-value pairs to filter by (exact matches only)\n                  For example: {'name': 'John', 'active': True}\n\n        Returns:\n            The first matching model instance, or None if no match is found\n\n        Note:\n            This implementation uses SQLAlchemy's filter_by() for exact matches.\n            For more complex queries (e.g., with operators like &gt;, &lt;, LIKE),\n            a custom implementation would be needed.\n        \"\"\"\n        session = self.Session()\n        try:\n            # SQLAlchemy queries are built differently than NoSQL.\n            # We'll map dictionary query to filter_by or filter.\n            # For simplicity, we'll use filter_by for exact matches here.\n            # More complex queries might require using `filter` with `and_`, `or_` etc.\n            return session.query(self.model_class).filter_by(**query).first()\n        except Exception as e:\n            print(f\"SQLAlchemy find_one error: {e}\")\n            return None\n        finally:\n            session.close()\n\n    def find_all(\n        self,\n        query: Optional[Dict[str, Any]] = None,\n        limit: Optional[int] = None,\n        skip: Optional[int] = None,\n    ) -&gt; List[T]:\n        \"\"\"\n        Finds all model instances matching a query, with optional pagination.\n\n        Args:\n            query: Optional dictionary of attribute-value pairs to filter by.\n                  If None, retrieves all instances of the model.\n            limit: Maximum number of results to return (for pagination)\n            skip: Number of results to skip (for pagination)\n\n        Returns:\n            A list of matching model instances, or an empty list if no matches\n            or if an error occurs\n\n        Example:\n            # Get all active users, 10 per page, starting from the 2nd page\n            users = manager.find_all({'active': True}, limit=10, skip=10)\n        \"\"\"\n        session = self.Session()\n        try:\n            q = session.query(self.model_class)\n            if query:\n                q = q.filter_by(**query)  # Apply filters\n            if skip is not None:\n                q = q.offset(skip)\n            if limit is not None:\n                q = q.limit(limit)\n            return q.all()\n        except Exception as e:\n            print(f\"SQLAlchemy find_all error: {e}\")\n            return []\n        finally:\n            session.close()\n\n    def update(self, model_id: Any, update_data: Dict[str, Any]) -&gt; Optional[T]:\n        \"\"\"\n        Updates an existing model instance by ID.\n\n        Args:\n            model_id: The primary key of the model to update\n            update_data: Dictionary containing the fields to update and their new values\n\n        Returns:\n            The updated model instance if found and updated successfully,\n            or None if the model wasn't found or an error occurred\n\n        Note:\n            This method handles session management and automatically rolls back\n            the transaction in case of IntegrityError (e.g., unique constraint violations).\n        \"\"\"\n        session = self.Session()\n        try:\n            instance = session.query(self.model_class).get(model_id)\n            if instance:\n                for key, value in update_data.items():\n                    setattr(instance, key, value)\n                session.commit()\n                session.refresh(instance)\n                return instance\n            return None\n        except IntegrityError as e:\n            session.rollback()\n            print(f\"SQLAlchemy update error: {e}\")\n            return None\n        finally:\n            session.close()\n\n    def delete(self, model_id: Any) -&gt; bool:\n        \"\"\"\n        Deletes a model instance by its ID.\n\n        Args:\n            model_id: The primary key of the model to delete\n\n        Returns:\n            True if the model was found and deleted successfully,\n            False if the model wasn't found\n        \"\"\"\n        session = self.Session()\n        try:\n            instance = session.query(self.model_class).get(model_id)\n            if instance:\n                session.delete(instance)\n                session.commit()\n                return True\n            return False\n        finally:\n            session.close()\n\n    def count(self, query: Optional[Dict[str, Any]] = None) -&gt; int:\n        \"\"\"\n        Counts the number of model instances matching a query.\n\n        Args:\n            query: Optional dictionary of attribute-value pairs to filter by.\n                  If None, counts all instances of the model.\n\n        Returns:\n            The number of matching instances\n\n        Example:\n            # Count all active users\n            active_user_count = manager.count({'active': True})\n        \"\"\"\n        session = self.Session()\n        try:\n            q = session.query(self.model_class)\n            if query:\n                q = q.filter_by(**query)\n            return q.count()\n        finally:\n            session.close()\n</code></pre>"},{"location":"reference/chalifour/db/managers/#chalifour.db.managers.SQLAlchemyModelManager.__init__","title":"<code>__init__(db_uri, model_class)</code>","text":"<p>Initialize the SQLAlchemy model manager.</p> <p>Parameters:</p> Name Type Description Default <code>db_uri</code> <code>str</code> <p>Database connection URI (e.g., 'sqlite:///database.db')</p> required <code>model_class</code> <code>Type[T]</code> <p>The SQLAlchemy model class this manager will operate on          (must be a subclass of the declarative Base)</p> required Note <p>This constructor automatically creates the necessary tables in the database if they don't already exist.</p> Source code in <code>src/chalifour/db/managers/_sql_alchemy_model_manager.py</code> <pre><code>def __init__(self, db_uri: str, model_class: Type[T]):\n    \"\"\"\n    Initialize the SQLAlchemy model manager.\n\n    Args:\n        db_uri: Database connection URI (e.g., 'sqlite:///database.db')\n        model_class: The SQLAlchemy model class this manager will operate on\n                     (must be a subclass of the declarative Base)\n\n    Note:\n        This constructor automatically creates the necessary tables in the database\n        if they don't already exist.\n    \"\"\"\n    self.engine = create_engine(db_uri)\n    self.model_class = model_class\n    Base.metadata.create_all(self.engine)  # Ensure table exists for this model\n    self.Session = sessionmaker(bind=self.engine)\n</code></pre>"},{"location":"reference/chalifour/db/managers/#chalifour.db.managers.SQLAlchemyModelManager.count","title":"<code>count(query=None)</code>","text":"<p>Counts the number of model instances matching a query.</p> <p>Parameters:</p> Name Type Description Default <code>query</code> <code>Optional[Dict[str, Any]]</code> <p>Optional dictionary of attribute-value pairs to filter by.   If None, counts all instances of the model.</p> <code>None</code> <p>Returns:</p> Type Description <code>int</code> <p>The number of matching instances</p> Example Source code in <code>src/chalifour/db/managers/_sql_alchemy_model_manager.py</code> <pre><code>def count(self, query: Optional[Dict[str, Any]] = None) -&gt; int:\n    \"\"\"\n    Counts the number of model instances matching a query.\n\n    Args:\n        query: Optional dictionary of attribute-value pairs to filter by.\n              If None, counts all instances of the model.\n\n    Returns:\n        The number of matching instances\n\n    Example:\n        # Count all active users\n        active_user_count = manager.count({'active': True})\n    \"\"\"\n    session = self.Session()\n    try:\n        q = session.query(self.model_class)\n        if query:\n            q = q.filter_by(**query)\n        return q.count()\n    finally:\n        session.close()\n</code></pre>"},{"location":"reference/chalifour/db/managers/#chalifour.db.managers.SQLAlchemyModelManager.count--count-all-active-users","title":"Count all active users","text":"<p>active_user_count = manager.count({'active': True})</p>"},{"location":"reference/chalifour/db/managers/#chalifour.db.managers.SQLAlchemyModelManager.create","title":"<code>create(model_data)</code>","text":"<p>Creates a new model instance in the database.</p> <p>Parameters:</p> Name Type Description Default <code>model_data</code> <code>Dict[str, Any]</code> <p>Dictionary containing the data for the new model instance         with keys corresponding to model attributes</p> required <p>Returns:</p> Type Description <code>Optional[T]</code> <p>The created model instance with any auto-generated fields populated,</p> <code>Optional[T]</code> <p>or None if creation fails (e.g., due to integrity constraints)</p> Note <p>This method handles session management and automatically rolls back the transaction in case of IntegrityError.</p> Source code in <code>src/chalifour/db/managers/_sql_alchemy_model_manager.py</code> <pre><code>def create(self, model_data: Dict[str, Any]) -&gt; Optional[T]:\n    \"\"\"\n    Creates a new model instance in the database.\n\n    Args:\n        model_data: Dictionary containing the data for the new model instance\n                    with keys corresponding to model attributes\n\n    Returns:\n        The created model instance with any auto-generated fields populated,\n        or None if creation fails (e.g., due to integrity constraints)\n\n    Note:\n        This method handles session management and automatically rolls back\n        the transaction in case of IntegrityError.\n    \"\"\"\n    session = self.Session()\n    try:\n        new_instance = self.model_class(**model_data)\n        session.add(new_instance)\n        session.commit()\n        session.refresh(new_instance)  # Refresh to get auto-generated ID if any\n        return new_instance\n    except IntegrityError as e:\n        session.rollback()\n        print(f\"SQLAlchemy create error: {e}\")\n        return None\n    finally:\n        session.close()\n</code></pre>"},{"location":"reference/chalifour/db/managers/#chalifour.db.managers.SQLAlchemyModelManager.delete","title":"<code>delete(model_id)</code>","text":"<p>Deletes a model instance by its ID.</p> <p>Parameters:</p> Name Type Description Default <code>model_id</code> <code>Any</code> <p>The primary key of the model to delete</p> required <p>Returns:</p> Type Description <code>bool</code> <p>True if the model was found and deleted successfully,</p> <code>bool</code> <p>False if the model wasn't found</p> Source code in <code>src/chalifour/db/managers/_sql_alchemy_model_manager.py</code> <pre><code>def delete(self, model_id: Any) -&gt; bool:\n    \"\"\"\n    Deletes a model instance by its ID.\n\n    Args:\n        model_id: The primary key of the model to delete\n\n    Returns:\n        True if the model was found and deleted successfully,\n        False if the model wasn't found\n    \"\"\"\n    session = self.Session()\n    try:\n        instance = session.query(self.model_class).get(model_id)\n        if instance:\n            session.delete(instance)\n            session.commit()\n            return True\n        return False\n    finally:\n        session.close()\n</code></pre>"},{"location":"reference/chalifour/db/managers/#chalifour.db.managers.SQLAlchemyModelManager.find_all","title":"<code>find_all(query=None, limit=None, skip=None)</code>","text":"<p>Finds all model instances matching a query, with optional pagination.</p> <p>Parameters:</p> Name Type Description Default <code>query</code> <code>Optional[Dict[str, Any]]</code> <p>Optional dictionary of attribute-value pairs to filter by.   If None, retrieves all instances of the model.</p> <code>None</code> <code>limit</code> <code>Optional[int]</code> <p>Maximum number of results to return (for pagination)</p> <code>None</code> <code>skip</code> <code>Optional[int]</code> <p>Number of results to skip (for pagination)</p> <code>None</code> <p>Returns:</p> Type Description <code>List[T]</code> <p>A list of matching model instances, or an empty list if no matches</p> <code>List[T]</code> <p>or if an error occurs</p> Example Source code in <code>src/chalifour/db/managers/_sql_alchemy_model_manager.py</code> <pre><code>def find_all(\n    self,\n    query: Optional[Dict[str, Any]] = None,\n    limit: Optional[int] = None,\n    skip: Optional[int] = None,\n) -&gt; List[T]:\n    \"\"\"\n    Finds all model instances matching a query, with optional pagination.\n\n    Args:\n        query: Optional dictionary of attribute-value pairs to filter by.\n              If None, retrieves all instances of the model.\n        limit: Maximum number of results to return (for pagination)\n        skip: Number of results to skip (for pagination)\n\n    Returns:\n        A list of matching model instances, or an empty list if no matches\n        or if an error occurs\n\n    Example:\n        # Get all active users, 10 per page, starting from the 2nd page\n        users = manager.find_all({'active': True}, limit=10, skip=10)\n    \"\"\"\n    session = self.Session()\n    try:\n        q = session.query(self.model_class)\n        if query:\n            q = q.filter_by(**query)  # Apply filters\n        if skip is not None:\n            q = q.offset(skip)\n        if limit is not None:\n            q = q.limit(limit)\n        return q.all()\n    except Exception as e:\n        print(f\"SQLAlchemy find_all error: {e}\")\n        return []\n    finally:\n        session.close()\n</code></pre>"},{"location":"reference/chalifour/db/managers/#chalifour.db.managers.SQLAlchemyModelManager.find_all--get-all-active-users-10-per-page-starting-from-the-2nd-page","title":"Get all active users, 10 per page, starting from the 2nd page","text":"<p>users = manager.find_all({'active': True}, limit=10, skip=10)</p>"},{"location":"reference/chalifour/db/managers/#chalifour.db.managers.SQLAlchemyModelManager.find_one","title":"<code>find_one(query)</code>","text":"<p>Finds a single model instance based on a query dictionary.</p> <p>Parameters:</p> Name Type Description Default <code>query</code> <code>Dict[str, Any]</code> <p>Dictionary of attribute-value pairs to filter by (exact matches only)   For example: {'name': 'John', 'active': True}</p> required <p>Returns:</p> Type Description <code>Optional[T]</code> <p>The first matching model instance, or None if no match is found</p> Note <p>This implementation uses SQLAlchemy's filter_by() for exact matches. For more complex queries (e.g., with operators like &gt;, &lt;, LIKE), a custom implementation would be needed.</p> Source code in <code>src/chalifour/db/managers/_sql_alchemy_model_manager.py</code> <pre><code>def find_one(self, query: Dict[str, Any]) -&gt; Optional[T]:\n    \"\"\"\n    Finds a single model instance based on a query dictionary.\n\n    Args:\n        query: Dictionary of attribute-value pairs to filter by (exact matches only)\n              For example: {'name': 'John', 'active': True}\n\n    Returns:\n        The first matching model instance, or None if no match is found\n\n    Note:\n        This implementation uses SQLAlchemy's filter_by() for exact matches.\n        For more complex queries (e.g., with operators like &gt;, &lt;, LIKE),\n        a custom implementation would be needed.\n    \"\"\"\n    session = self.Session()\n    try:\n        # SQLAlchemy queries are built differently than NoSQL.\n        # We'll map dictionary query to filter_by or filter.\n        # For simplicity, we'll use filter_by for exact matches here.\n        # More complex queries might require using `filter` with `and_`, `or_` etc.\n        return session.query(self.model_class).filter_by(**query).first()\n    except Exception as e:\n        print(f\"SQLAlchemy find_one error: {e}\")\n        return None\n    finally:\n        session.close()\n</code></pre>"},{"location":"reference/chalifour/db/managers/#chalifour.db.managers.SQLAlchemyModelManager.get_by_id","title":"<code>get_by_id(model_id)</code>","text":"<p>Retrieves a model instance by its primary key ID.</p> <p>Parameters:</p> Name Type Description Default <code>model_id</code> <code>Any</code> <p>The primary key value of the model to retrieve</p> required <p>Returns:</p> Type Description <code>Optional[T]</code> <p>The model instance if found, or None if no model exists with the given ID</p> Source code in <code>src/chalifour/db/managers/_sql_alchemy_model_manager.py</code> <pre><code>def get_by_id(self, model_id: Any) -&gt; Optional[T]:\n    \"\"\"\n    Retrieves a model instance by its primary key ID.\n\n    Args:\n        model_id: The primary key value of the model to retrieve\n\n    Returns:\n        The model instance if found, or None if no model exists with the given ID\n    \"\"\"\n    session = self.Session()\n    try:\n        return session.query(self.model_class).get(model_id)\n    finally:\n        session.close()\n</code></pre>"},{"location":"reference/chalifour/db/managers/#chalifour.db.managers.SQLAlchemyModelManager.update","title":"<code>update(model_id, update_data)</code>","text":"<p>Updates an existing model instance by ID.</p> <p>Parameters:</p> Name Type Description Default <code>model_id</code> <code>Any</code> <p>The primary key of the model to update</p> required <code>update_data</code> <code>Dict[str, Any]</code> <p>Dictionary containing the fields to update and their new values</p> required <p>Returns:</p> Type Description <code>Optional[T]</code> <p>The updated model instance if found and updated successfully,</p> <code>Optional[T]</code> <p>or None if the model wasn't found or an error occurred</p> Note <p>This method handles session management and automatically rolls back the transaction in case of IntegrityError (e.g., unique constraint violations).</p> Source code in <code>src/chalifour/db/managers/_sql_alchemy_model_manager.py</code> <pre><code>def update(self, model_id: Any, update_data: Dict[str, Any]) -&gt; Optional[T]:\n    \"\"\"\n    Updates an existing model instance by ID.\n\n    Args:\n        model_id: The primary key of the model to update\n        update_data: Dictionary containing the fields to update and their new values\n\n    Returns:\n        The updated model instance if found and updated successfully,\n        or None if the model wasn't found or an error occurred\n\n    Note:\n        This method handles session management and automatically rolls back\n        the transaction in case of IntegrityError (e.g., unique constraint violations).\n    \"\"\"\n    session = self.Session()\n    try:\n        instance = session.query(self.model_class).get(model_id)\n        if instance:\n            for key, value in update_data.items():\n                setattr(instance, key, value)\n            session.commit()\n            session.refresh(instance)\n            return instance\n        return None\n    except IntegrityError as e:\n        session.rollback()\n        print(f\"SQLAlchemy update error: {e}\")\n        return None\n    finally:\n        session.close()\n</code></pre>"}]}