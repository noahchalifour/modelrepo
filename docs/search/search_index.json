{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"reference/modelrepo/","title":"modelrepo","text":""},{"location":"reference/modelrepo/factory/","title":"modelrepo.factory","text":"<p>Factory functions for repository management.</p> <p>This module provides utility functions for dynamically loading and managing repository classes in the modelrepo package.</p>"},{"location":"reference/modelrepo/factory/#modelrepo.factory.get_repository","title":"<code>get_repository(model_class, class_path, kwargs)</code>","text":"<p>Dynamically import and return a ModelRepository factory from a fully qualified path.</p> <p>This function allows for dynamic loading of repository implementations based on configuration, enabling flexible repository selection without hard-coded dependencies.</p> <p>Parameters:</p> Name Type Description Default <code>class_path</code> <code>str</code> <p>A string representing the fully qualified path to the repository class        (e.g., \"modelrepo.repository.MongoDBModelRepository\")</p> required <p>Returns:</p> Type Description <code>ModelRepository[T]</code> <p>The factory to create the ModelRepository referenced by the path</p> <p>Raises:</p> Type Description <code>ImportError</code> <p>If the module cannot be imported</p> <code>AttributeError</code> <p>If the class does not exist in the specified module</p> Example <p>repo_factory = get_repository_factory('modelrepo.repository.InMemoryModelRepository') repo_instance = repo_factory()</p> Source code in <code>src/modelrepo/factory.py</code> <pre><code>def get_repository(\n    model_class: Type[T], class_path: str, kwargs: Dict[str, Any]\n) -&gt; ModelRepository[T]:\n    \"\"\"\n    Dynamically import and return a ModelRepository factory from a fully qualified path.\n\n    This function allows for dynamic loading of repository implementations based on\n    configuration, enabling flexible repository selection without hard-coded dependencies.\n\n    Args:\n        class_path: A string representing the fully qualified path to the repository class\n                   (e.g., \"modelrepo.repository.MongoDBModelRepository\")\n\n    Returns:\n        The factory to create the ModelRepository referenced by the path\n\n    Raises:\n        ImportError: If the module cannot be imported\n        AttributeError: If the class does not exist in the specified module\n\n    Example:\n        &gt;&gt;&gt; repo_factory = get_repository_factory('modelrepo.repository.InMemoryModelRepository')\n        &gt;&gt;&gt; repo_instance = repo_factory()\n    \"\"\"\n    print(\"Using model repository class:\", class_path)\n\n    try:\n        module_name, class_name = class_path.rsplit(\".\", 1)\n        module = importlib.import_module(module_name)\n        my_class = getattr(module, class_name)\n        return my_class[model_class](model_class=model_class, **kwargs)\n    except (ImportError, AttributeError) as e:\n        print(f\"Error importing class '{class_path}': {e}\")\n        raise\n</code></pre>"},{"location":"reference/modelrepo/models/","title":"modelrepo.models","text":""},{"location":"reference/modelrepo/models/base/","title":"modelrepo.models.base","text":"<p>Base model classes for different database backends.</p> <p>This module provides the foundational model classes that serve as base classes for database-specific models in the Chalifour database system. It includes base classes for SQL databases (using SQLAlchemy) and MongoDB.</p>"},{"location":"reference/modelrepo/models/base/#modelrepo.models.base.MongoDBModel","title":"<code>MongoDBModel</code>  <code>dataclass</code>","text":"<p>Base class for all MongoDB models.</p> <p>This class provides a consistent interface for MongoDB documents. It uses the standard MongoDB '_id' field and provides a property to access it as 'id' for consistency with other model types.</p> <p>Attributes:</p> Name Type Description <code>_id</code> <code>str</code> <p>MongoDB document identifier</p> Source code in <code>src/modelrepo/models/base.py</code> <pre><code>@dataclass\nclass MongoDBModel:\n    \"\"\"\n    Base class for all MongoDB models.\n\n    This class provides a consistent interface for MongoDB documents.\n    It uses the standard MongoDB '_id' field and provides a property\n    to access it as 'id' for consistency with other model types.\n\n    Attributes:\n        _id (str): MongoDB document identifier\n    \"\"\"\n\n    _id: str\n\n    def __init__(self, id=None, _id=None):\n        \"\"\"\n        Initialize a MongoDB model with an ID.\n\n        This constructor allows creating a model with either 'id' or '_id',\n        prioritizing 'id' if both are provided. This makes the API more\n        flexible and consistent with other model types.\n\n        Args:\n            id (str, optional): The document identifier to use. Defaults to None.\n            _id (str, optional): Alternative way to specify the document identifier.\n                                Used if 'id' is not provided. Defaults to None.\n        \"\"\"\n        if id is not None:\n            self._id = id\n        elif _id is not None:\n            self._id = _id\n\n    @property\n    def id(self) -&gt; str:\n        \"\"\"\n        Property that provides access to the MongoDB document ID.\n\n        Returns:\n            str: The document's MongoDB identifier\n        \"\"\"\n        return self._id\n</code></pre>"},{"location":"reference/modelrepo/models/base/#modelrepo.models.base.MongoDBModel.id","title":"<code>id</code>  <code>property</code>","text":"<p>Property that provides access to the MongoDB document ID.</p> <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>The document's MongoDB identifier</p>"},{"location":"reference/modelrepo/models/base/#modelrepo.models.base.MongoDBModel.__init__","title":"<code>__init__(id=None, _id=None)</code>","text":"<p>Initialize a MongoDB model with an ID.</p> <p>This constructor allows creating a model with either 'id' or '_id', prioritizing 'id' if both are provided. This makes the API more flexible and consistent with other model types.</p> <p>Parameters:</p> Name Type Description Default <code>id</code> <code>str</code> <p>The document identifier to use. Defaults to None.</p> <code>None</code> <code>_id</code> <code>str</code> <p>Alternative way to specify the document identifier.                 Used if 'id' is not provided. Defaults to None.</p> <code>None</code> Source code in <code>src/modelrepo/models/base.py</code> <pre><code>def __init__(self, id=None, _id=None):\n    \"\"\"\n    Initialize a MongoDB model with an ID.\n\n    This constructor allows creating a model with either 'id' or '_id',\n    prioritizing 'id' if both are provided. This makes the API more\n    flexible and consistent with other model types.\n\n    Args:\n        id (str, optional): The document identifier to use. Defaults to None.\n        _id (str, optional): Alternative way to specify the document identifier.\n                            Used if 'id' is not provided. Defaults to None.\n    \"\"\"\n    if id is not None:\n        self._id = id\n    elif _id is not None:\n        self._id = _id\n</code></pre>"},{"location":"reference/modelrepo/models/base/#modelrepo.models.base.SQLModel","title":"<code>SQLModel</code>","text":"<p>               Bases: <code>Base</code></p> <p>Base class for all SQL database models.</p> <p>This abstract class extends SQLAlchemy's declarative base and provides common functionality for all SQL-based models. It defines a standard primary key 'id' column that all derived models will inherit.</p> <p>Attributes:</p> Name Type Description <code>id</code> <code>Column</code> <p>Integer primary key column that auto-increments</p> Source code in <code>src/modelrepo/models/base.py</code> <pre><code>class SQLModel(Base):\n    \"\"\"\n    Base class for all SQL database models.\n\n    This abstract class extends SQLAlchemy's declarative base and provides\n    common functionality for all SQL-based models. It defines a standard\n    primary key 'id' column that all derived models will inherit.\n\n    Attributes:\n        id (Column): Integer primary key column that auto-increments\n    \"\"\"\n\n    __abstract__ = True\n\n    id = Column(Integer, primary_key=True)\n</code></pre>"},{"location":"reference/modelrepo/repository/","title":"modelrepo.repository","text":""},{"location":"reference/modelrepo/repository/#modelrepo.repository.InMemoryModelRepository","title":"<code>InMemoryModelRepository</code>","text":"<p>               Bases: <code>ModelRepository[T]</code></p> <p>An in-memory implementation of ModelRepository for testing purposes.</p> <p>This repository stores models in an in-memory dictionary and simulates the behavior of a real database repository without actually connecting to any database. It's useful for unit tests that need to test code that depends on repositories without setting up actual database connections.</p> <p>Attributes:</p> Name Type Description <code>_storage</code> <code>Dict[str, T]</code> <p>In-memory storage for models</p> Source code in <code>src/modelrepo/repository/_in_memory_model_repository.py</code> <pre><code>class InMemoryModelRepository(ModelRepository[T]):\n    \"\"\"\n    An in-memory implementation of ModelRepository for testing purposes.\n\n    This repository stores models in an in-memory dictionary and simulates\n    the behavior of a real database repository without actually connecting\n    to any database. It's useful for unit tests that need to test code that\n    depends on repositories without setting up actual database connections.\n\n    Attributes:\n        _storage (Dict[str, T]): In-memory storage for models\n    \"\"\"\n\n    def __init__(self, model_class: Type[T]) -&gt; None:\n        \"\"\"\n        Initialize an empty in-memory storage for models.\n\n        Args:\n            model_class: The class type of models to be stored in this repository.\n                         Used for type checking and instantiation of models.\n        \"\"\"\n        super().__init__(model_class)\n\n        self._storage: Dict[str, T] = {}\n\n    def get_by_id(self, model_id: Any) -&gt; Optional[T]:\n        \"\"\"\n        Retrieve a model by its ID.\n\n        Args:\n            model_id: The ID of the model to retrieve\n\n        Returns:\n            The model if found, None otherwise\n        \"\"\"\n        return self._storage.get(model_id)\n\n    def find_one(self, query: Dict[str, Any]) -&gt; Optional[T]:\n        \"\"\"\n        Find a single model matching the given query criteria.\n\n        Args:\n            query: Dictionary of attribute-value pairs to match against models\n\n        Returns:\n            A model if found, None otherwise\n\n        Note:\n            This method returns the first matching model found. If no models match\n            the query, it will raise an IndexError.\n        \"\"\"\n        results = self.find_all(query, limit=1)\n        return results[0] if results else None\n\n    def find_all(\n        self,\n        query: Optional[Dict[str, Any]] = None,\n        limit: Optional[int] = None,\n        skip: Optional[int] = None,\n    ) -&gt; List[T]:\n        \"\"\"\n        Find models matching the given query criteria.\n\n        Args:\n            query: Dictionary of attribute-value pairs to match against models\n            limit: Maximum number of results to return\n            skip: Number of results to skip (for pagination)\n\n        Returns:\n            A list of models matching the query\n        \"\"\"\n        if query is None:\n            query = {}\n\n        results = []\n        for model in self._storage.values():\n            matches = True\n            for key, value in query.items():\n                if not hasattr(model, key) or getattr(model, key) != value:\n                    matches = False\n                    break\n            if matches:\n                results.append(model)\n\n        if skip is not None:\n            results = results[skip:]\n\n        if limit is not None:\n            results = results[:limit]\n\n        return results\n\n    def create(self, model_data: Dict[str, Any]) -&gt; Optional[T]:\n        \"\"\"\n        Create a new model in the repository.\n\n        If the model doesn't have an ID, a random UUID will be assigned.\n\n        Args:\n            model_data: The model to create\n\n        Returns:\n            The created model with its ID\n        \"\"\"\n        # Assign an ID if not present\n        if not model_data.get(\"id\") and not model_data.get(\"_id\"):\n            model_data[\"id\"] = str(uuid4())\n\n        model_id = model_data[\"id\"]\n        model = self.model_class(**model_data)\n        self._storage[model_id] = model\n        return model\n\n    def update(self, model_id: Any, update_data: Dict[str, Any]) -&gt; Optional[T]:\n        \"\"\"\n        Update an existing model in the repository.\n\n        Args:\n            model_id: The ID of the model to update\n            update_data: Dictionary containing the fields to update and their new values\n\n        Returns:\n            The updated model\n\n        Raises:\n            ValueError: If the model with the specified ID doesn't exist\n        \"\"\"\n        if model_id not in self._storage:\n            raise ValueError(f\"Model with ID {model_id} not found\")\n\n        model = self._storage[model_id]\n        for key, value in update_data.items():\n            setattr(model, key, value)\n        return model\n\n    def delete(self, model_id: Any) -&gt; bool:\n        \"\"\"\n        Delete a model from the repository.\n\n        Args:\n            model_id: The ID of the model to delete\n\n        Returns:\n            True if model was deleted, False otherwise\n\n        Raises:\n            ValueError: If the model doesn't exist\n        \"\"\"\n        if model_id not in self._storage:\n            raise ValueError(f\"Model with ID {model_id} not found\")\n\n        del self._storage[model_id]\n        return True\n\n    def count(self, query: Optional[Dict[str, Any]] = None) -&gt; int:\n        \"\"\"\n        Count the number of models in the repository based on a query.\n\n        Args:\n            query: Optional dictionary of attribute-value pairs to filter models\n\n        Returns:\n            The number of models matching the query criteria\n        \"\"\"\n        return len(self.find_all(query))\n\n    def clear(self) -&gt; None:\n        \"\"\"Clear all models from the repository.\"\"\"\n        self._storage.clear()\n</code></pre>"},{"location":"reference/modelrepo/repository/#modelrepo.repository.InMemoryModelRepository.__init__","title":"<code>__init__(model_class)</code>","text":"<p>Initialize an empty in-memory storage for models.</p> <p>Parameters:</p> Name Type Description Default <code>model_class</code> <code>Type[T]</code> <p>The class type of models to be stored in this repository.          Used for type checking and instantiation of models.</p> required Source code in <code>src/modelrepo/repository/_in_memory_model_repository.py</code> <pre><code>def __init__(self, model_class: Type[T]) -&gt; None:\n    \"\"\"\n    Initialize an empty in-memory storage for models.\n\n    Args:\n        model_class: The class type of models to be stored in this repository.\n                     Used for type checking and instantiation of models.\n    \"\"\"\n    super().__init__(model_class)\n\n    self._storage: Dict[str, T] = {}\n</code></pre>"},{"location":"reference/modelrepo/repository/#modelrepo.repository.InMemoryModelRepository.clear","title":"<code>clear()</code>","text":"<p>Clear all models from the repository.</p> Source code in <code>src/modelrepo/repository/_in_memory_model_repository.py</code> <pre><code>def clear(self) -&gt; None:\n    \"\"\"Clear all models from the repository.\"\"\"\n    self._storage.clear()\n</code></pre>"},{"location":"reference/modelrepo/repository/#modelrepo.repository.InMemoryModelRepository.count","title":"<code>count(query=None)</code>","text":"<p>Count the number of models in the repository based on a query.</p> <p>Parameters:</p> Name Type Description Default <code>query</code> <code>Optional[Dict[str, Any]]</code> <p>Optional dictionary of attribute-value pairs to filter models</p> <code>None</code> <p>Returns:</p> Type Description <code>int</code> <p>The number of models matching the query criteria</p> Source code in <code>src/modelrepo/repository/_in_memory_model_repository.py</code> <pre><code>def count(self, query: Optional[Dict[str, Any]] = None) -&gt; int:\n    \"\"\"\n    Count the number of models in the repository based on a query.\n\n    Args:\n        query: Optional dictionary of attribute-value pairs to filter models\n\n    Returns:\n        The number of models matching the query criteria\n    \"\"\"\n    return len(self.find_all(query))\n</code></pre>"},{"location":"reference/modelrepo/repository/#modelrepo.repository.InMemoryModelRepository.create","title":"<code>create(model_data)</code>","text":"<p>Create a new model in the repository.</p> <p>If the model doesn't have an ID, a random UUID will be assigned.</p> <p>Parameters:</p> Name Type Description Default <code>model_data</code> <code>Dict[str, Any]</code> <p>The model to create</p> required <p>Returns:</p> Type Description <code>Optional[T]</code> <p>The created model with its ID</p> Source code in <code>src/modelrepo/repository/_in_memory_model_repository.py</code> <pre><code>def create(self, model_data: Dict[str, Any]) -&gt; Optional[T]:\n    \"\"\"\n    Create a new model in the repository.\n\n    If the model doesn't have an ID, a random UUID will be assigned.\n\n    Args:\n        model_data: The model to create\n\n    Returns:\n        The created model with its ID\n    \"\"\"\n    # Assign an ID if not present\n    if not model_data.get(\"id\") and not model_data.get(\"_id\"):\n        model_data[\"id\"] = str(uuid4())\n\n    model_id = model_data[\"id\"]\n    model = self.model_class(**model_data)\n    self._storage[model_id] = model\n    return model\n</code></pre>"},{"location":"reference/modelrepo/repository/#modelrepo.repository.InMemoryModelRepository.delete","title":"<code>delete(model_id)</code>","text":"<p>Delete a model from the repository.</p> <p>Parameters:</p> Name Type Description Default <code>model_id</code> <code>Any</code> <p>The ID of the model to delete</p> required <p>Returns:</p> Type Description <code>bool</code> <p>True if model was deleted, False otherwise</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>If the model doesn't exist</p> Source code in <code>src/modelrepo/repository/_in_memory_model_repository.py</code> <pre><code>def delete(self, model_id: Any) -&gt; bool:\n    \"\"\"\n    Delete a model from the repository.\n\n    Args:\n        model_id: The ID of the model to delete\n\n    Returns:\n        True if model was deleted, False otherwise\n\n    Raises:\n        ValueError: If the model doesn't exist\n    \"\"\"\n    if model_id not in self._storage:\n        raise ValueError(f\"Model with ID {model_id} not found\")\n\n    del self._storage[model_id]\n    return True\n</code></pre>"},{"location":"reference/modelrepo/repository/#modelrepo.repository.InMemoryModelRepository.find_all","title":"<code>find_all(query=None, limit=None, skip=None)</code>","text":"<p>Find models matching the given query criteria.</p> <p>Parameters:</p> Name Type Description Default <code>query</code> <code>Optional[Dict[str, Any]]</code> <p>Dictionary of attribute-value pairs to match against models</p> <code>None</code> <code>limit</code> <code>Optional[int]</code> <p>Maximum number of results to return</p> <code>None</code> <code>skip</code> <code>Optional[int]</code> <p>Number of results to skip (for pagination)</p> <code>None</code> <p>Returns:</p> Type Description <code>List[T]</code> <p>A list of models matching the query</p> Source code in <code>src/modelrepo/repository/_in_memory_model_repository.py</code> <pre><code>def find_all(\n    self,\n    query: Optional[Dict[str, Any]] = None,\n    limit: Optional[int] = None,\n    skip: Optional[int] = None,\n) -&gt; List[T]:\n    \"\"\"\n    Find models matching the given query criteria.\n\n    Args:\n        query: Dictionary of attribute-value pairs to match against models\n        limit: Maximum number of results to return\n        skip: Number of results to skip (for pagination)\n\n    Returns:\n        A list of models matching the query\n    \"\"\"\n    if query is None:\n        query = {}\n\n    results = []\n    for model in self._storage.values():\n        matches = True\n        for key, value in query.items():\n            if not hasattr(model, key) or getattr(model, key) != value:\n                matches = False\n                break\n        if matches:\n            results.append(model)\n\n    if skip is not None:\n        results = results[skip:]\n\n    if limit is not None:\n        results = results[:limit]\n\n    return results\n</code></pre>"},{"location":"reference/modelrepo/repository/#modelrepo.repository.InMemoryModelRepository.find_one","title":"<code>find_one(query)</code>","text":"<p>Find a single model matching the given query criteria.</p> <p>Parameters:</p> Name Type Description Default <code>query</code> <code>Dict[str, Any]</code> <p>Dictionary of attribute-value pairs to match against models</p> required <p>Returns:</p> Type Description <code>Optional[T]</code> <p>A model if found, None otherwise</p> Note <p>This method returns the first matching model found. If no models match the query, it will raise an IndexError.</p> Source code in <code>src/modelrepo/repository/_in_memory_model_repository.py</code> <pre><code>def find_one(self, query: Dict[str, Any]) -&gt; Optional[T]:\n    \"\"\"\n    Find a single model matching the given query criteria.\n\n    Args:\n        query: Dictionary of attribute-value pairs to match against models\n\n    Returns:\n        A model if found, None otherwise\n\n    Note:\n        This method returns the first matching model found. If no models match\n        the query, it will raise an IndexError.\n    \"\"\"\n    results = self.find_all(query, limit=1)\n    return results[0] if results else None\n</code></pre>"},{"location":"reference/modelrepo/repository/#modelrepo.repository.InMemoryModelRepository.get_by_id","title":"<code>get_by_id(model_id)</code>","text":"<p>Retrieve a model by its ID.</p> <p>Parameters:</p> Name Type Description Default <code>model_id</code> <code>Any</code> <p>The ID of the model to retrieve</p> required <p>Returns:</p> Type Description <code>Optional[T]</code> <p>The model if found, None otherwise</p> Source code in <code>src/modelrepo/repository/_in_memory_model_repository.py</code> <pre><code>def get_by_id(self, model_id: Any) -&gt; Optional[T]:\n    \"\"\"\n    Retrieve a model by its ID.\n\n    Args:\n        model_id: The ID of the model to retrieve\n\n    Returns:\n        The model if found, None otherwise\n    \"\"\"\n    return self._storage.get(model_id)\n</code></pre>"},{"location":"reference/modelrepo/repository/#modelrepo.repository.InMemoryModelRepository.update","title":"<code>update(model_id, update_data)</code>","text":"<p>Update an existing model in the repository.</p> <p>Parameters:</p> Name Type Description Default <code>model_id</code> <code>Any</code> <p>The ID of the model to update</p> required <code>update_data</code> <code>Dict[str, Any]</code> <p>Dictionary containing the fields to update and their new values</p> required <p>Returns:</p> Type Description <code>Optional[T]</code> <p>The updated model</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>If the model with the specified ID doesn't exist</p> Source code in <code>src/modelrepo/repository/_in_memory_model_repository.py</code> <pre><code>def update(self, model_id: Any, update_data: Dict[str, Any]) -&gt; Optional[T]:\n    \"\"\"\n    Update an existing model in the repository.\n\n    Args:\n        model_id: The ID of the model to update\n        update_data: Dictionary containing the fields to update and their new values\n\n    Returns:\n        The updated model\n\n    Raises:\n        ValueError: If the model with the specified ID doesn't exist\n    \"\"\"\n    if model_id not in self._storage:\n        raise ValueError(f\"Model with ID {model_id} not found\")\n\n    model = self._storage[model_id]\n    for key, value in update_data.items():\n        setattr(model, key, value)\n    return model\n</code></pre>"},{"location":"reference/modelrepo/repository/#modelrepo.repository.ModelRepository","title":"<code>ModelRepository</code>","text":"<p>               Bases: <code>Generic[T]</code>, <code>ABC</code></p> <p>Abstract base class for a generic model repository. Defines common CRUD operations for any model type.</p> <p>Attributes:</p> Name Type Description <code>model_class</code> <p>Wrapper class for the model object</p> Source code in <code>src/modelrepo/repository/_model_repository.py</code> <pre><code>class ModelRepository(Generic[T], abc.ABC):\n    \"\"\"\n    Abstract base class for a generic model repository.\n    Defines common CRUD operations for any model type.\n\n    Attributes:\n        model_class: Wrapper class for the model object\n    \"\"\"\n\n    def __init__(self, model_class: Type[T]) -&gt; None:\n        self.model_class = model_class\n\n    @abc.abstractmethod\n    def create(self, model_data: Dict[str, Any]) -&gt; Optional[T]:\n        \"\"\"\n        Creates a new model instance in the database.\n        :param model_data: A dictionary containing the data for the new model.\n        :return: The created model instance or None if creation fails (e.g., due to duplicate key).\n        \"\"\"\n        pass\n\n    @abc.abstractmethod\n    def get_by_id(self, model_id: Any) -&gt; Optional[T]:\n        \"\"\"\n        Retrieves a model instance by its ID.\n        The type of model_id will depend on the database (e.g., int for SQL, ObjectId for MongoDB).\n        :param model_id: The unique identifier of the model.\n        :return: The model instance or None if not found.\n        \"\"\"\n        pass\n\n    @abc.abstractmethod\n    def find_one(self, query: Dict[str, Any]) -&gt; Optional[T]:\n        \"\"\"\n        Finds a single model instance based on a query.\n        The query format will vary by database.\n        :param query: A dictionary representing the search criteria.\n        :return: A single model instance or None if not found.\n        \"\"\"\n        pass\n\n    @abc.abstractmethod\n    def find_all(\n        self,\n        query: Optional[Dict[str, Any]] = None,\n        limit: Optional[int] = None,\n        skip: Optional[int] = None,\n    ) -&gt; List[T]:\n        \"\"\"\n        Finds all model instances matching a query, with optional pagination.\n        :param query: Optional dictionary representing the search criteria. If None, retrieves all.\n        :param limit: Maximum number of results to return.\n        :param skip: Number of results to skip (for pagination).\n        :return: A list of model instances.\n        \"\"\"\n        pass\n\n    @abc.abstractmethod\n    def update(self, model_id: Any, update_data: Dict[str, Any]) -&gt; Optional[T]:\n        \"\"\"\n        Updates an existing model instance.\n        :param model_id: The ID of the model to update.\n        :param update_data: A dictionary containing the fields to update and their new values.\n        :return: The updated model instance or None if not found/updated.\n        \"\"\"\n        pass\n\n    @abc.abstractmethod\n    def delete(self, model_id: Any) -&gt; bool:\n        \"\"\"\n        Deletes a model instance by its ID.\n        :param model_id: The ID of the model to delete.\n        :return: True if the model was deleted, False otherwise.\n        \"\"\"\n        pass\n\n    @abc.abstractmethod\n    def count(self, query: Optional[Dict[str, Any]] = None) -&gt; int:\n        \"\"\"\n        Counts the number of model instances matching a query.\n        :param query: Optional dictionary representing the search criteria.\n        :return: The number of matching instances.\n        \"\"\"\n        pass\n</code></pre>"},{"location":"reference/modelrepo/repository/#modelrepo.repository.ModelRepository.count","title":"<code>count(query=None)</code>  <code>abstractmethod</code>","text":"<p>Counts the number of model instances matching a query. :param query: Optional dictionary representing the search criteria. :return: The number of matching instances.</p> Source code in <code>src/modelrepo/repository/_model_repository.py</code> <pre><code>@abc.abstractmethod\ndef count(self, query: Optional[Dict[str, Any]] = None) -&gt; int:\n    \"\"\"\n    Counts the number of model instances matching a query.\n    :param query: Optional dictionary representing the search criteria.\n    :return: The number of matching instances.\n    \"\"\"\n    pass\n</code></pre>"},{"location":"reference/modelrepo/repository/#modelrepo.repository.ModelRepository.create","title":"<code>create(model_data)</code>  <code>abstractmethod</code>","text":"<p>Creates a new model instance in the database. :param model_data: A dictionary containing the data for the new model. :return: The created model instance or None if creation fails (e.g., due to duplicate key).</p> Source code in <code>src/modelrepo/repository/_model_repository.py</code> <pre><code>@abc.abstractmethod\ndef create(self, model_data: Dict[str, Any]) -&gt; Optional[T]:\n    \"\"\"\n    Creates a new model instance in the database.\n    :param model_data: A dictionary containing the data for the new model.\n    :return: The created model instance or None if creation fails (e.g., due to duplicate key).\n    \"\"\"\n    pass\n</code></pre>"},{"location":"reference/modelrepo/repository/#modelrepo.repository.ModelRepository.delete","title":"<code>delete(model_id)</code>  <code>abstractmethod</code>","text":"<p>Deletes a model instance by its ID. :param model_id: The ID of the model to delete. :return: True if the model was deleted, False otherwise.</p> Source code in <code>src/modelrepo/repository/_model_repository.py</code> <pre><code>@abc.abstractmethod\ndef delete(self, model_id: Any) -&gt; bool:\n    \"\"\"\n    Deletes a model instance by its ID.\n    :param model_id: The ID of the model to delete.\n    :return: True if the model was deleted, False otherwise.\n    \"\"\"\n    pass\n</code></pre>"},{"location":"reference/modelrepo/repository/#modelrepo.repository.ModelRepository.find_all","title":"<code>find_all(query=None, limit=None, skip=None)</code>  <code>abstractmethod</code>","text":"<p>Finds all model instances matching a query, with optional pagination. :param query: Optional dictionary representing the search criteria. If None, retrieves all. :param limit: Maximum number of results to return. :param skip: Number of results to skip (for pagination). :return: A list of model instances.</p> Source code in <code>src/modelrepo/repository/_model_repository.py</code> <pre><code>@abc.abstractmethod\ndef find_all(\n    self,\n    query: Optional[Dict[str, Any]] = None,\n    limit: Optional[int] = None,\n    skip: Optional[int] = None,\n) -&gt; List[T]:\n    \"\"\"\n    Finds all model instances matching a query, with optional pagination.\n    :param query: Optional dictionary representing the search criteria. If None, retrieves all.\n    :param limit: Maximum number of results to return.\n    :param skip: Number of results to skip (for pagination).\n    :return: A list of model instances.\n    \"\"\"\n    pass\n</code></pre>"},{"location":"reference/modelrepo/repository/#modelrepo.repository.ModelRepository.find_one","title":"<code>find_one(query)</code>  <code>abstractmethod</code>","text":"<p>Finds a single model instance based on a query. The query format will vary by database. :param query: A dictionary representing the search criteria. :return: A single model instance or None if not found.</p> Source code in <code>src/modelrepo/repository/_model_repository.py</code> <pre><code>@abc.abstractmethod\ndef find_one(self, query: Dict[str, Any]) -&gt; Optional[T]:\n    \"\"\"\n    Finds a single model instance based on a query.\n    The query format will vary by database.\n    :param query: A dictionary representing the search criteria.\n    :return: A single model instance or None if not found.\n    \"\"\"\n    pass\n</code></pre>"},{"location":"reference/modelrepo/repository/#modelrepo.repository.ModelRepository.get_by_id","title":"<code>get_by_id(model_id)</code>  <code>abstractmethod</code>","text":"<p>Retrieves a model instance by its ID. The type of model_id will depend on the database (e.g., int for SQL, ObjectId for MongoDB). :param model_id: The unique identifier of the model. :return: The model instance or None if not found.</p> Source code in <code>src/modelrepo/repository/_model_repository.py</code> <pre><code>@abc.abstractmethod\ndef get_by_id(self, model_id: Any) -&gt; Optional[T]:\n    \"\"\"\n    Retrieves a model instance by its ID.\n    The type of model_id will depend on the database (e.g., int for SQL, ObjectId for MongoDB).\n    :param model_id: The unique identifier of the model.\n    :return: The model instance or None if not found.\n    \"\"\"\n    pass\n</code></pre>"},{"location":"reference/modelrepo/repository/#modelrepo.repository.ModelRepository.update","title":"<code>update(model_id, update_data)</code>  <code>abstractmethod</code>","text":"<p>Updates an existing model instance. :param model_id: The ID of the model to update. :param update_data: A dictionary containing the fields to update and their new values. :return: The updated model instance or None if not found/updated.</p> Source code in <code>src/modelrepo/repository/_model_repository.py</code> <pre><code>@abc.abstractmethod\ndef update(self, model_id: Any, update_data: Dict[str, Any]) -&gt; Optional[T]:\n    \"\"\"\n    Updates an existing model instance.\n    :param model_id: The ID of the model to update.\n    :param update_data: A dictionary containing the fields to update and their new values.\n    :return: The updated model instance or None if not found/updated.\n    \"\"\"\n    pass\n</code></pre>"},{"location":"reference/modelrepo/repository/#modelrepo.repository.MongoDBModelRepository","title":"<code>MongoDBModelRepository</code>","text":"<p>               Bases: <code>ModelRepository[T]</code></p> <p>MongoDB implementation of the ModelRepository interface.</p> <p>This class provides CRUD operations for MongoDB collections, with support for wrapping database documents in model classes for easier access.</p> <p>Attributes:</p> Name Type Description <code>client</code> <p>The MongoDB client connection</p> <code>db</code> <p>The MongoDB database instance</p> <code>collection</code> <p>The MongoDB collection being managed</p> <code>model_class</code> <p>Class used to wrap raw MongoDB documents</p> Source code in <code>src/modelrepo/repository/_mongo_db_model_repository.py</code> <pre><code>class MongoDBModelRepository(ModelRepository[T]):\n    \"\"\"\n    MongoDB implementation of the ModelRepository interface.\n\n    This class provides CRUD operations for MongoDB collections, with support\n    for wrapping database documents in model classes for easier access.\n\n    Attributes:\n        client: The MongoDB client connection\n        db: The MongoDB database instance\n        collection: The MongoDB collection being managed\n        model_class: Class used to wrap raw MongoDB documents\n    \"\"\"\n\n    def __init__(self, db_uri: str, db_name: str, model_class: Type[T]):\n        \"\"\"\n        Initialize a MongoDB model manager.\n\n        Args:\n            db_uri: URI connection string for database\n            db_name: Name of the MongoDB database\n            model_class: Class to wrap returned documents (provides object-oriented access)\n        \"\"\"\n        super().__init__(model_class)\n\n        collection_name = model_class.__name__\n\n        self.client = MongoClient(db_uri)\n        self.db = self.client[db_name]\n        self.collection = self.db[collection_name]\n\n    def _wrap_result(self, data: Optional[Dict[str, Any]]) -&gt; Optional[T]:\n        \"\"\"\n        Wrap a MongoDB document in the model wrapper class.\n\n        Args:\n            data: Raw MongoDB document dictionary\n\n        Returns:\n            An instance of the model wrapper class or None if data is None\n        \"\"\"\n        if data:\n            return self.model_class(**data)\n        return None\n\n    def create(self, model_data: Dict[str, Any]) -&gt; Optional[T]:\n        \"\"\"\n        Create a new document in the MongoDB collection.\n\n        Args:\n            model_data: Dictionary containing the document data\n\n        Returns:\n            The created model instance or None if creation fails (e.g., due to duplicate key)\n\n        Note:\n            The returned model includes the MongoDB-generated _id field\n        \"\"\"\n        try:\n            result = self.collection.insert_one(model_data)\n            # MongoDB returns _id as ObjectId, ensure it's in the returned dict\n            model_data[\"_id\"] = result.inserted_id\n            return self._wrap_result(model_data)\n        except DuplicateKeyError as e:\n            print(f\"MongoDB create error: {e}\")\n            return None\n\n    def get_by_id(self, model_id: Any) -&gt; Optional[T]:\n        \"\"\"\n        Retrieve a document by its MongoDB _id.\n\n        Args:\n            model_id: The document's _id (can be string or ObjectId)\n\n        Returns:\n            The model instance or None if not found or if the ID format is invalid\n        \"\"\"\n        if not isinstance(model_id, ObjectId):\n            try:\n                model_id = ObjectId(model_id)\n            except Exception:\n                return None  # Invalid ObjectId format\n\n        result = self.collection.find_one({\"_id\": model_id})\n        return self._wrap_result(result)\n\n    def find_one(self, query: Dict[str, Any]) -&gt; Optional[T]:\n        \"\"\"\n        Find a single document matching the query criteria.\n\n        Args:\n            query: MongoDB query dictionary\n\n        Returns:\n            The first matching model instance or None if no matches found\n        \"\"\"\n        result = self.collection.find_one(query)\n        return self._wrap_result(result)\n\n    def find_all(\n        self,\n        query: Optional[Dict[str, Any]] = None,\n        limit: Optional[int] = None,\n        skip: Optional[int] = None,\n    ) -&gt; List[T]:\n        \"\"\"\n        Find all documents matching the query criteria with optional pagination.\n\n        Args:\n            query: MongoDB query dictionary (defaults to empty query which matches all documents)\n            limit: Maximum number of results to return\n            skip: Number of results to skip (for pagination)\n\n        Returns:\n            A list of model instances matching the query\n        \"\"\"\n        query = query if query is not None else {}\n        cursor = self.collection.find(query)\n        if skip is not None:\n            cursor = cursor.skip(skip)\n        if limit is not None:\n            cursor = cursor.limit(limit)\n        results = [self._wrap_result(doc) for doc in cursor]\n        return [r for r in results if r is not None]\n\n    def update(self, model_id: Any, update_data: Dict[str, Any]) -&gt; Optional[T]:\n        \"\"\"\n        Update an existing document by its _id.\n\n        Args:\n            model_id: The document's _id (can be string or ObjectId)\n            update_data: Dictionary containing the fields to update and their new values\n\n        Returns:\n            The updated model instance or None if not found/updated or if the ID format is invalid\n\n        Note:\n            Uses MongoDB's $set operator to update only the specified fields\n        \"\"\"\n        if not isinstance(model_id, ObjectId):\n            try:\n                model_id = ObjectId(model_id)\n            except Exception:\n                return None\n\n        try:\n            result = self.collection.update_one(\n                {\"_id\": model_id}, {\"$set\": update_data}\n            )\n            if result.matched_count &gt; 0:\n                return self.get_by_id(model_id)  # Fetch the updated document\n            return None\n        except DuplicateKeyError as e:\n            print(f\"MongoDB update error: {e}\")\n            return None\n\n    def delete(self, model_id: Any) -&gt; bool:\n        \"\"\"\n        Delete a document by its _id.\n\n        Args:\n            model_id: The document's _id (can be string or ObjectId)\n\n        Returns:\n            True if the document was deleted, False otherwise or if the ID format is invalid\n        \"\"\"\n        if not isinstance(model_id, ObjectId):\n            try:\n                model_id = ObjectId(model_id)\n            except Exception:\n                return False\n\n        result = self.collection.delete_one({\"_id\": model_id})\n        return result.deleted_count &gt; 0\n\n    def count(self, query: Optional[Dict[str, Any]] = None) -&gt; int:\n        \"\"\"\n        Count the number of documents matching a query.\n\n        Args:\n            query: MongoDB query dictionary (defaults to empty query which matches all documents)\n\n        Returns:\n            The number of matching documents\n        \"\"\"\n        query = query if query is not None else {}\n        return self.collection.count_documents(query)\n</code></pre>"},{"location":"reference/modelrepo/repository/#modelrepo.repository.MongoDBModelRepository.__init__","title":"<code>__init__(db_uri, db_name, model_class)</code>","text":"<p>Initialize a MongoDB model manager.</p> <p>Parameters:</p> Name Type Description Default <code>db_uri</code> <code>str</code> <p>URI connection string for database</p> required <code>db_name</code> <code>str</code> <p>Name of the MongoDB database</p> required <code>model_class</code> <code>Type[T]</code> <p>Class to wrap returned documents (provides object-oriented access)</p> required Source code in <code>src/modelrepo/repository/_mongo_db_model_repository.py</code> <pre><code>def __init__(self, db_uri: str, db_name: str, model_class: Type[T]):\n    \"\"\"\n    Initialize a MongoDB model manager.\n\n    Args:\n        db_uri: URI connection string for database\n        db_name: Name of the MongoDB database\n        model_class: Class to wrap returned documents (provides object-oriented access)\n    \"\"\"\n    super().__init__(model_class)\n\n    collection_name = model_class.__name__\n\n    self.client = MongoClient(db_uri)\n    self.db = self.client[db_name]\n    self.collection = self.db[collection_name]\n</code></pre>"},{"location":"reference/modelrepo/repository/#modelrepo.repository.MongoDBModelRepository.count","title":"<code>count(query=None)</code>","text":"<p>Count the number of documents matching a query.</p> <p>Parameters:</p> Name Type Description Default <code>query</code> <code>Optional[Dict[str, Any]]</code> <p>MongoDB query dictionary (defaults to empty query which matches all documents)</p> <code>None</code> <p>Returns:</p> Type Description <code>int</code> <p>The number of matching documents</p> Source code in <code>src/modelrepo/repository/_mongo_db_model_repository.py</code> <pre><code>def count(self, query: Optional[Dict[str, Any]] = None) -&gt; int:\n    \"\"\"\n    Count the number of documents matching a query.\n\n    Args:\n        query: MongoDB query dictionary (defaults to empty query which matches all documents)\n\n    Returns:\n        The number of matching documents\n    \"\"\"\n    query = query if query is not None else {}\n    return self.collection.count_documents(query)\n</code></pre>"},{"location":"reference/modelrepo/repository/#modelrepo.repository.MongoDBModelRepository.create","title":"<code>create(model_data)</code>","text":"<p>Create a new document in the MongoDB collection.</p> <p>Parameters:</p> Name Type Description Default <code>model_data</code> <code>Dict[str, Any]</code> <p>Dictionary containing the document data</p> required <p>Returns:</p> Type Description <code>Optional[T]</code> <p>The created model instance or None if creation fails (e.g., due to duplicate key)</p> Note <p>The returned model includes the MongoDB-generated _id field</p> Source code in <code>src/modelrepo/repository/_mongo_db_model_repository.py</code> <pre><code>def create(self, model_data: Dict[str, Any]) -&gt; Optional[T]:\n    \"\"\"\n    Create a new document in the MongoDB collection.\n\n    Args:\n        model_data: Dictionary containing the document data\n\n    Returns:\n        The created model instance or None if creation fails (e.g., due to duplicate key)\n\n    Note:\n        The returned model includes the MongoDB-generated _id field\n    \"\"\"\n    try:\n        result = self.collection.insert_one(model_data)\n        # MongoDB returns _id as ObjectId, ensure it's in the returned dict\n        model_data[\"_id\"] = result.inserted_id\n        return self._wrap_result(model_data)\n    except DuplicateKeyError as e:\n        print(f\"MongoDB create error: {e}\")\n        return None\n</code></pre>"},{"location":"reference/modelrepo/repository/#modelrepo.repository.MongoDBModelRepository.delete","title":"<code>delete(model_id)</code>","text":"<p>Delete a document by its _id.</p> <p>Parameters:</p> Name Type Description Default <code>model_id</code> <code>Any</code> <p>The document's _id (can be string or ObjectId)</p> required <p>Returns:</p> Type Description <code>bool</code> <p>True if the document was deleted, False otherwise or if the ID format is invalid</p> Source code in <code>src/modelrepo/repository/_mongo_db_model_repository.py</code> <pre><code>def delete(self, model_id: Any) -&gt; bool:\n    \"\"\"\n    Delete a document by its _id.\n\n    Args:\n        model_id: The document's _id (can be string or ObjectId)\n\n    Returns:\n        True if the document was deleted, False otherwise or if the ID format is invalid\n    \"\"\"\n    if not isinstance(model_id, ObjectId):\n        try:\n            model_id = ObjectId(model_id)\n        except Exception:\n            return False\n\n    result = self.collection.delete_one({\"_id\": model_id})\n    return result.deleted_count &gt; 0\n</code></pre>"},{"location":"reference/modelrepo/repository/#modelrepo.repository.MongoDBModelRepository.find_all","title":"<code>find_all(query=None, limit=None, skip=None)</code>","text":"<p>Find all documents matching the query criteria with optional pagination.</p> <p>Parameters:</p> Name Type Description Default <code>query</code> <code>Optional[Dict[str, Any]]</code> <p>MongoDB query dictionary (defaults to empty query which matches all documents)</p> <code>None</code> <code>limit</code> <code>Optional[int]</code> <p>Maximum number of results to return</p> <code>None</code> <code>skip</code> <code>Optional[int]</code> <p>Number of results to skip (for pagination)</p> <code>None</code> <p>Returns:</p> Type Description <code>List[T]</code> <p>A list of model instances matching the query</p> Source code in <code>src/modelrepo/repository/_mongo_db_model_repository.py</code> <pre><code>def find_all(\n    self,\n    query: Optional[Dict[str, Any]] = None,\n    limit: Optional[int] = None,\n    skip: Optional[int] = None,\n) -&gt; List[T]:\n    \"\"\"\n    Find all documents matching the query criteria with optional pagination.\n\n    Args:\n        query: MongoDB query dictionary (defaults to empty query which matches all documents)\n        limit: Maximum number of results to return\n        skip: Number of results to skip (for pagination)\n\n    Returns:\n        A list of model instances matching the query\n    \"\"\"\n    query = query if query is not None else {}\n    cursor = self.collection.find(query)\n    if skip is not None:\n        cursor = cursor.skip(skip)\n    if limit is not None:\n        cursor = cursor.limit(limit)\n    results = [self._wrap_result(doc) for doc in cursor]\n    return [r for r in results if r is not None]\n</code></pre>"},{"location":"reference/modelrepo/repository/#modelrepo.repository.MongoDBModelRepository.find_one","title":"<code>find_one(query)</code>","text":"<p>Find a single document matching the query criteria.</p> <p>Parameters:</p> Name Type Description Default <code>query</code> <code>Dict[str, Any]</code> <p>MongoDB query dictionary</p> required <p>Returns:</p> Type Description <code>Optional[T]</code> <p>The first matching model instance or None if no matches found</p> Source code in <code>src/modelrepo/repository/_mongo_db_model_repository.py</code> <pre><code>def find_one(self, query: Dict[str, Any]) -&gt; Optional[T]:\n    \"\"\"\n    Find a single document matching the query criteria.\n\n    Args:\n        query: MongoDB query dictionary\n\n    Returns:\n        The first matching model instance or None if no matches found\n    \"\"\"\n    result = self.collection.find_one(query)\n    return self._wrap_result(result)\n</code></pre>"},{"location":"reference/modelrepo/repository/#modelrepo.repository.MongoDBModelRepository.get_by_id","title":"<code>get_by_id(model_id)</code>","text":"<p>Retrieve a document by its MongoDB _id.</p> <p>Parameters:</p> Name Type Description Default <code>model_id</code> <code>Any</code> <p>The document's _id (can be string or ObjectId)</p> required <p>Returns:</p> Type Description <code>Optional[T]</code> <p>The model instance or None if not found or if the ID format is invalid</p> Source code in <code>src/modelrepo/repository/_mongo_db_model_repository.py</code> <pre><code>def get_by_id(self, model_id: Any) -&gt; Optional[T]:\n    \"\"\"\n    Retrieve a document by its MongoDB _id.\n\n    Args:\n        model_id: The document's _id (can be string or ObjectId)\n\n    Returns:\n        The model instance or None if not found or if the ID format is invalid\n    \"\"\"\n    if not isinstance(model_id, ObjectId):\n        try:\n            model_id = ObjectId(model_id)\n        except Exception:\n            return None  # Invalid ObjectId format\n\n    result = self.collection.find_one({\"_id\": model_id})\n    return self._wrap_result(result)\n</code></pre>"},{"location":"reference/modelrepo/repository/#modelrepo.repository.MongoDBModelRepository.update","title":"<code>update(model_id, update_data)</code>","text":"<p>Update an existing document by its _id.</p> <p>Parameters:</p> Name Type Description Default <code>model_id</code> <code>Any</code> <p>The document's _id (can be string or ObjectId)</p> required <code>update_data</code> <code>Dict[str, Any]</code> <p>Dictionary containing the fields to update and their new values</p> required <p>Returns:</p> Type Description <code>Optional[T]</code> <p>The updated model instance or None if not found/updated or if the ID format is invalid</p> Note <p>Uses MongoDB's $set operator to update only the specified fields</p> Source code in <code>src/modelrepo/repository/_mongo_db_model_repository.py</code> <pre><code>def update(self, model_id: Any, update_data: Dict[str, Any]) -&gt; Optional[T]:\n    \"\"\"\n    Update an existing document by its _id.\n\n    Args:\n        model_id: The document's _id (can be string or ObjectId)\n        update_data: Dictionary containing the fields to update and their new values\n\n    Returns:\n        The updated model instance or None if not found/updated or if the ID format is invalid\n\n    Note:\n        Uses MongoDB's $set operator to update only the specified fields\n    \"\"\"\n    if not isinstance(model_id, ObjectId):\n        try:\n            model_id = ObjectId(model_id)\n        except Exception:\n            return None\n\n    try:\n        result = self.collection.update_one(\n            {\"_id\": model_id}, {\"$set\": update_data}\n        )\n        if result.matched_count &gt; 0:\n            return self.get_by_id(model_id)  # Fetch the updated document\n        return None\n    except DuplicateKeyError as e:\n        print(f\"MongoDB update error: {e}\")\n        return None\n</code></pre>"},{"location":"reference/modelrepo/repository/#modelrepo.repository.SQLAlchemyModelRepository","title":"<code>SQLAlchemyModelRepository</code>","text":"<p>               Bases: <code>ModelRepository[T]</code></p> <p>SQLAlchemy implementation of the ModelRepository interface.</p> <p>This class provides CRUD operations for SQLAlchemy models, handling session management and database interactions. It implements all abstract methods defined in the ModelRepository base class.</p> <p>Attributes:</p> Name Type Description <code>engine</code> <p>SQLAlchemy engine instance connected to the database</p> <code>model_class</code> <p>The SQLAlchemy model class this manager will operate on</p> <code>Session</code> <p>SQLAlchemy sessionmaker factory for creating new sessions</p> Source code in <code>src/modelrepo/repository/_sql_alchemy_model_repository.py</code> <pre><code>class SQLAlchemyModelRepository(ModelRepository[T]):\n    \"\"\"\n    SQLAlchemy implementation of the ModelRepository interface.\n\n    This class provides CRUD operations for SQLAlchemy models, handling session\n    management and database interactions. It implements all abstract methods\n    defined in the ModelRepository base class.\n\n    Attributes:\n        engine: SQLAlchemy engine instance connected to the database\n        model_class: The SQLAlchemy model class this manager will operate on\n        Session: SQLAlchemy sessionmaker factory for creating new sessions\n    \"\"\"\n\n    def __init__(self, db_uri: str, model_class: Type[T]):\n        \"\"\"\n        Initialize the SQLAlchemy model manager.\n\n        Args:\n            db_uri: URI connection string for database\n            model_class: The SQLAlchemy model class this manager will operate on\n                         (must be a subclass of the declarative Base)\n\n        Note:\n            This constructor automatically creates the necessary tables in the database\n            if they don't already exist.\n        \"\"\"\n        super().__init__(model_class)\n\n        self.engine = create_engine(db_uri)\n        Base.metadata.create_all(self.engine)  # Ensure table exists for this model\n        self.Session = sessionmaker(bind=self.engine)\n\n    def create(self, model_data: Dict[str, Any]) -&gt; Optional[T]:\n        \"\"\"\n        Creates a new model instance in the database.\n\n        Args:\n            model_data: Dictionary containing the data for the new model instance\n                        with keys corresponding to model attributes\n\n        Returns:\n            The created model instance with any auto-generated fields populated,\n            or None if creation fails (e.g., due to integrity constraints)\n\n        Note:\n            This method handles session management and automatically rolls back\n            the transaction in case of IntegrityError.\n        \"\"\"\n        session = self.Session()\n        try:\n            new_instance = self.model_class(**model_data)\n            session.add(new_instance)\n            session.commit()\n            session.refresh(new_instance)  # Refresh to get auto-generated ID if any\n            return new_instance\n        except IntegrityError as e:\n            session.rollback()\n            print(f\"SQLAlchemy create error: {e}\")\n            return None\n        finally:\n            session.close()\n\n    def get_by_id(self, model_id: Any) -&gt; Optional[T]:\n        \"\"\"\n        Retrieves a model instance by its primary key ID.\n\n        Args:\n            model_id: The primary key value of the model to retrieve\n\n        Returns:\n            The model instance if found, or None if no model exists with the given ID\n        \"\"\"\n        session = self.Session()\n        try:\n            return session.query(self.model_class).get(model_id)\n        finally:\n            session.close()\n\n    def find_one(self, query: Dict[str, Any]) -&gt; Optional[T]:\n        \"\"\"\n        Finds a single model instance based on a query dictionary.\n\n        Args:\n            query: Dictionary of attribute-value pairs to filter by (exact matches only)\n                  For example: {'name': 'John', 'active': True}\n\n        Returns:\n            The first matching model instance, or None if no match is found\n\n        Note:\n            This implementation uses SQLAlchemy's filter_by() for exact matches.\n            For more complex queries (e.g., with operators like &gt;, &lt;, LIKE),\n            a custom implementation would be needed.\n        \"\"\"\n        session = self.Session()\n        try:\n            # SQLAlchemy queries are built differently than NoSQL.\n            # We'll map dictionary query to filter_by or filter.\n            # For simplicity, we'll use filter_by for exact matches here.\n            # More complex queries might require using `filter` with `and_`, `or_` etc.\n            return session.query(self.model_class).filter_by(**query).first()\n        except Exception as e:\n            print(f\"SQLAlchemy find_one error: {e}\")\n            return None\n        finally:\n            session.close()\n\n    def find_all(\n        self,\n        query: Optional[Dict[str, Any]] = None,\n        limit: Optional[int] = None,\n        skip: Optional[int] = None,\n    ) -&gt; List[T]:\n        \"\"\"\n        Finds all model instances matching a query, with optional pagination.\n\n        Args:\n            query: Optional dictionary of attribute-value pairs to filter by.\n                  If None, retrieves all instances of the model.\n            limit: Maximum number of results to return (for pagination)\n            skip: Number of results to skip (for pagination)\n\n        Returns:\n            A list of matching model instances, or an empty list if no matches\n            or if an error occurs\n\n        Example:\n            # Get all active users, 10 per page, starting from the 2nd page\n            users = manager.find_all({'active': True}, limit=10, skip=10)\n        \"\"\"\n        session = self.Session()\n        try:\n            q = session.query(self.model_class)\n            if query:\n                q = q.filter_by(**query)  # Apply filters\n            if skip is not None:\n                q = q.offset(skip)\n            if limit is not None:\n                q = q.limit(limit)\n            return q.all()\n        except Exception as e:\n            print(f\"SQLAlchemy find_all error: {e}\")\n            return []\n        finally:\n            session.close()\n\n    def update(self, model_id: Any, update_data: Dict[str, Any]) -&gt; Optional[T]:\n        \"\"\"\n        Updates an existing model instance by ID.\n\n        Args:\n            model_id: The primary key of the model to update\n            update_data: Dictionary containing the fields to update and their new values\n\n        Returns:\n            The updated model instance if found and updated successfully,\n            or None if the model wasn't found or an error occurred\n\n        Note:\n            This method handles session management and automatically rolls back\n            the transaction in case of IntegrityError (e.g., unique constraint violations).\n        \"\"\"\n        session = self.Session()\n        try:\n            instance = session.query(self.model_class).get(model_id)\n            if instance:\n                for key, value in update_data.items():\n                    setattr(instance, key, value)\n                session.commit()\n                session.refresh(instance)\n                return instance\n            return None\n        except IntegrityError as e:\n            session.rollback()\n            print(f\"SQLAlchemy update error: {e}\")\n            return None\n        finally:\n            session.close()\n\n    def delete(self, model_id: Any) -&gt; bool:\n        \"\"\"\n        Deletes a model instance by its ID.\n\n        Args:\n            model_id: The primary key of the model to delete\n\n        Returns:\n            True if the model was found and deleted successfully,\n            False if the model wasn't found\n        \"\"\"\n        session = self.Session()\n        try:\n            instance = session.query(self.model_class).get(model_id)\n            if instance:\n                session.delete(instance)\n                session.commit()\n                return True\n            return False\n        finally:\n            session.close()\n\n    def count(self, query: Optional[Dict[str, Any]] = None) -&gt; int:\n        \"\"\"\n        Counts the number of model instances matching a query.\n\n        Args:\n            query: Optional dictionary of attribute-value pairs to filter by.\n                  If None, counts all instances of the model.\n\n        Returns:\n            The number of matching instances\n\n        Example:\n            # Count all active users\n            active_user_count = manager.count({'active': True})\n        \"\"\"\n        session = self.Session()\n        try:\n            q = session.query(self.model_class)\n            if query:\n                q = q.filter_by(**query)\n            return q.count()\n        finally:\n            session.close()\n</code></pre>"},{"location":"reference/modelrepo/repository/#modelrepo.repository.SQLAlchemyModelRepository.__init__","title":"<code>__init__(db_uri, model_class)</code>","text":"<p>Initialize the SQLAlchemy model manager.</p> <p>Parameters:</p> Name Type Description Default <code>db_uri</code> <code>str</code> <p>URI connection string for database</p> required <code>model_class</code> <code>Type[T]</code> <p>The SQLAlchemy model class this manager will operate on          (must be a subclass of the declarative Base)</p> required Note <p>This constructor automatically creates the necessary tables in the database if they don't already exist.</p> Source code in <code>src/modelrepo/repository/_sql_alchemy_model_repository.py</code> <pre><code>def __init__(self, db_uri: str, model_class: Type[T]):\n    \"\"\"\n    Initialize the SQLAlchemy model manager.\n\n    Args:\n        db_uri: URI connection string for database\n        model_class: The SQLAlchemy model class this manager will operate on\n                     (must be a subclass of the declarative Base)\n\n    Note:\n        This constructor automatically creates the necessary tables in the database\n        if they don't already exist.\n    \"\"\"\n    super().__init__(model_class)\n\n    self.engine = create_engine(db_uri)\n    Base.metadata.create_all(self.engine)  # Ensure table exists for this model\n    self.Session = sessionmaker(bind=self.engine)\n</code></pre>"},{"location":"reference/modelrepo/repository/#modelrepo.repository.SQLAlchemyModelRepository.count","title":"<code>count(query=None)</code>","text":"<p>Counts the number of model instances matching a query.</p> <p>Parameters:</p> Name Type Description Default <code>query</code> <code>Optional[Dict[str, Any]]</code> <p>Optional dictionary of attribute-value pairs to filter by.   If None, counts all instances of the model.</p> <code>None</code> <p>Returns:</p> Type Description <code>int</code> <p>The number of matching instances</p> Example Source code in <code>src/modelrepo/repository/_sql_alchemy_model_repository.py</code> <pre><code>def count(self, query: Optional[Dict[str, Any]] = None) -&gt; int:\n    \"\"\"\n    Counts the number of model instances matching a query.\n\n    Args:\n        query: Optional dictionary of attribute-value pairs to filter by.\n              If None, counts all instances of the model.\n\n    Returns:\n        The number of matching instances\n\n    Example:\n        # Count all active users\n        active_user_count = manager.count({'active': True})\n    \"\"\"\n    session = self.Session()\n    try:\n        q = session.query(self.model_class)\n        if query:\n            q = q.filter_by(**query)\n        return q.count()\n    finally:\n        session.close()\n</code></pre>"},{"location":"reference/modelrepo/repository/#modelrepo.repository.SQLAlchemyModelRepository.count--count-all-active-users","title":"Count all active users","text":"<p>active_user_count = manager.count({'active': True})</p>"},{"location":"reference/modelrepo/repository/#modelrepo.repository.SQLAlchemyModelRepository.create","title":"<code>create(model_data)</code>","text":"<p>Creates a new model instance in the database.</p> <p>Parameters:</p> Name Type Description Default <code>model_data</code> <code>Dict[str, Any]</code> <p>Dictionary containing the data for the new model instance         with keys corresponding to model attributes</p> required <p>Returns:</p> Type Description <code>Optional[T]</code> <p>The created model instance with any auto-generated fields populated,</p> <code>Optional[T]</code> <p>or None if creation fails (e.g., due to integrity constraints)</p> Note <p>This method handles session management and automatically rolls back the transaction in case of IntegrityError.</p> Source code in <code>src/modelrepo/repository/_sql_alchemy_model_repository.py</code> <pre><code>def create(self, model_data: Dict[str, Any]) -&gt; Optional[T]:\n    \"\"\"\n    Creates a new model instance in the database.\n\n    Args:\n        model_data: Dictionary containing the data for the new model instance\n                    with keys corresponding to model attributes\n\n    Returns:\n        The created model instance with any auto-generated fields populated,\n        or None if creation fails (e.g., due to integrity constraints)\n\n    Note:\n        This method handles session management and automatically rolls back\n        the transaction in case of IntegrityError.\n    \"\"\"\n    session = self.Session()\n    try:\n        new_instance = self.model_class(**model_data)\n        session.add(new_instance)\n        session.commit()\n        session.refresh(new_instance)  # Refresh to get auto-generated ID if any\n        return new_instance\n    except IntegrityError as e:\n        session.rollback()\n        print(f\"SQLAlchemy create error: {e}\")\n        return None\n    finally:\n        session.close()\n</code></pre>"},{"location":"reference/modelrepo/repository/#modelrepo.repository.SQLAlchemyModelRepository.delete","title":"<code>delete(model_id)</code>","text":"<p>Deletes a model instance by its ID.</p> <p>Parameters:</p> Name Type Description Default <code>model_id</code> <code>Any</code> <p>The primary key of the model to delete</p> required <p>Returns:</p> Type Description <code>bool</code> <p>True if the model was found and deleted successfully,</p> <code>bool</code> <p>False if the model wasn't found</p> Source code in <code>src/modelrepo/repository/_sql_alchemy_model_repository.py</code> <pre><code>def delete(self, model_id: Any) -&gt; bool:\n    \"\"\"\n    Deletes a model instance by its ID.\n\n    Args:\n        model_id: The primary key of the model to delete\n\n    Returns:\n        True if the model was found and deleted successfully,\n        False if the model wasn't found\n    \"\"\"\n    session = self.Session()\n    try:\n        instance = session.query(self.model_class).get(model_id)\n        if instance:\n            session.delete(instance)\n            session.commit()\n            return True\n        return False\n    finally:\n        session.close()\n</code></pre>"},{"location":"reference/modelrepo/repository/#modelrepo.repository.SQLAlchemyModelRepository.find_all","title":"<code>find_all(query=None, limit=None, skip=None)</code>","text":"<p>Finds all model instances matching a query, with optional pagination.</p> <p>Parameters:</p> Name Type Description Default <code>query</code> <code>Optional[Dict[str, Any]]</code> <p>Optional dictionary of attribute-value pairs to filter by.   If None, retrieves all instances of the model.</p> <code>None</code> <code>limit</code> <code>Optional[int]</code> <p>Maximum number of results to return (for pagination)</p> <code>None</code> <code>skip</code> <code>Optional[int]</code> <p>Number of results to skip (for pagination)</p> <code>None</code> <p>Returns:</p> Type Description <code>List[T]</code> <p>A list of matching model instances, or an empty list if no matches</p> <code>List[T]</code> <p>or if an error occurs</p> Example Source code in <code>src/modelrepo/repository/_sql_alchemy_model_repository.py</code> <pre><code>def find_all(\n    self,\n    query: Optional[Dict[str, Any]] = None,\n    limit: Optional[int] = None,\n    skip: Optional[int] = None,\n) -&gt; List[T]:\n    \"\"\"\n    Finds all model instances matching a query, with optional pagination.\n\n    Args:\n        query: Optional dictionary of attribute-value pairs to filter by.\n              If None, retrieves all instances of the model.\n        limit: Maximum number of results to return (for pagination)\n        skip: Number of results to skip (for pagination)\n\n    Returns:\n        A list of matching model instances, or an empty list if no matches\n        or if an error occurs\n\n    Example:\n        # Get all active users, 10 per page, starting from the 2nd page\n        users = manager.find_all({'active': True}, limit=10, skip=10)\n    \"\"\"\n    session = self.Session()\n    try:\n        q = session.query(self.model_class)\n        if query:\n            q = q.filter_by(**query)  # Apply filters\n        if skip is not None:\n            q = q.offset(skip)\n        if limit is not None:\n            q = q.limit(limit)\n        return q.all()\n    except Exception as e:\n        print(f\"SQLAlchemy find_all error: {e}\")\n        return []\n    finally:\n        session.close()\n</code></pre>"},{"location":"reference/modelrepo/repository/#modelrepo.repository.SQLAlchemyModelRepository.find_all--get-all-active-users-10-per-page-starting-from-the-2nd-page","title":"Get all active users, 10 per page, starting from the 2nd page","text":"<p>users = manager.find_all({'active': True}, limit=10, skip=10)</p>"},{"location":"reference/modelrepo/repository/#modelrepo.repository.SQLAlchemyModelRepository.find_one","title":"<code>find_one(query)</code>","text":"<p>Finds a single model instance based on a query dictionary.</p> <p>Parameters:</p> Name Type Description Default <code>query</code> <code>Dict[str, Any]</code> <p>Dictionary of attribute-value pairs to filter by (exact matches only)   For example: {'name': 'John', 'active': True}</p> required <p>Returns:</p> Type Description <code>Optional[T]</code> <p>The first matching model instance, or None if no match is found</p> Note <p>This implementation uses SQLAlchemy's filter_by() for exact matches. For more complex queries (e.g., with operators like &gt;, &lt;, LIKE), a custom implementation would be needed.</p> Source code in <code>src/modelrepo/repository/_sql_alchemy_model_repository.py</code> <pre><code>def find_one(self, query: Dict[str, Any]) -&gt; Optional[T]:\n    \"\"\"\n    Finds a single model instance based on a query dictionary.\n\n    Args:\n        query: Dictionary of attribute-value pairs to filter by (exact matches only)\n              For example: {'name': 'John', 'active': True}\n\n    Returns:\n        The first matching model instance, or None if no match is found\n\n    Note:\n        This implementation uses SQLAlchemy's filter_by() for exact matches.\n        For more complex queries (e.g., with operators like &gt;, &lt;, LIKE),\n        a custom implementation would be needed.\n    \"\"\"\n    session = self.Session()\n    try:\n        # SQLAlchemy queries are built differently than NoSQL.\n        # We'll map dictionary query to filter_by or filter.\n        # For simplicity, we'll use filter_by for exact matches here.\n        # More complex queries might require using `filter` with `and_`, `or_` etc.\n        return session.query(self.model_class).filter_by(**query).first()\n    except Exception as e:\n        print(f\"SQLAlchemy find_one error: {e}\")\n        return None\n    finally:\n        session.close()\n</code></pre>"},{"location":"reference/modelrepo/repository/#modelrepo.repository.SQLAlchemyModelRepository.get_by_id","title":"<code>get_by_id(model_id)</code>","text":"<p>Retrieves a model instance by its primary key ID.</p> <p>Parameters:</p> Name Type Description Default <code>model_id</code> <code>Any</code> <p>The primary key value of the model to retrieve</p> required <p>Returns:</p> Type Description <code>Optional[T]</code> <p>The model instance if found, or None if no model exists with the given ID</p> Source code in <code>src/modelrepo/repository/_sql_alchemy_model_repository.py</code> <pre><code>def get_by_id(self, model_id: Any) -&gt; Optional[T]:\n    \"\"\"\n    Retrieves a model instance by its primary key ID.\n\n    Args:\n        model_id: The primary key value of the model to retrieve\n\n    Returns:\n        The model instance if found, or None if no model exists with the given ID\n    \"\"\"\n    session = self.Session()\n    try:\n        return session.query(self.model_class).get(model_id)\n    finally:\n        session.close()\n</code></pre>"},{"location":"reference/modelrepo/repository/#modelrepo.repository.SQLAlchemyModelRepository.update","title":"<code>update(model_id, update_data)</code>","text":"<p>Updates an existing model instance by ID.</p> <p>Parameters:</p> Name Type Description Default <code>model_id</code> <code>Any</code> <p>The primary key of the model to update</p> required <code>update_data</code> <code>Dict[str, Any]</code> <p>Dictionary containing the fields to update and their new values</p> required <p>Returns:</p> Type Description <code>Optional[T]</code> <p>The updated model instance if found and updated successfully,</p> <code>Optional[T]</code> <p>or None if the model wasn't found or an error occurred</p> Note <p>This method handles session management and automatically rolls back the transaction in case of IntegrityError (e.g., unique constraint violations).</p> Source code in <code>src/modelrepo/repository/_sql_alchemy_model_repository.py</code> <pre><code>def update(self, model_id: Any, update_data: Dict[str, Any]) -&gt; Optional[T]:\n    \"\"\"\n    Updates an existing model instance by ID.\n\n    Args:\n        model_id: The primary key of the model to update\n        update_data: Dictionary containing the fields to update and their new values\n\n    Returns:\n        The updated model instance if found and updated successfully,\n        or None if the model wasn't found or an error occurred\n\n    Note:\n        This method handles session management and automatically rolls back\n        the transaction in case of IntegrityError (e.g., unique constraint violations).\n    \"\"\"\n    session = self.Session()\n    try:\n        instance = session.query(self.model_class).get(model_id)\n        if instance:\n            for key, value in update_data.items():\n                setattr(instance, key, value)\n            session.commit()\n            session.refresh(instance)\n            return instance\n        return None\n    except IntegrityError as e:\n        session.rollback()\n        print(f\"SQLAlchemy update error: {e}\")\n        return None\n    finally:\n        session.close()\n</code></pre>"}]}